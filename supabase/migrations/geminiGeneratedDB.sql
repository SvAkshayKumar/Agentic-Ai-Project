-- ================================================================================================
-- Part 1: Table Creation
-- This section creates all the necessary tables for your application in their final, consolidated form.
-- ================================================================================================

-- Stores individual diary entries for each user.
CREATE TABLE IF NOT EXISTS public.diary_entries (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users NOT NULL,
  title text NOT NULL,
  content text NOT NULL,
  mood_score integer CHECK (mood_score >= 1 AND mood_score <= 10),
  tags text[] DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.diary_entries IS 'Stores individual diary entries for each user.';

-- Stores additional non-auth information for users, combining all alterations.
CREATE TABLE IF NOT EXISTS public.user_profiles (
  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  display_name text,
  age_range text CHECK (age_range IN ('13-15', '16-18', '19-24')),
  preferred_activities text[] DEFAULT '{}',
  wellness_goals text[] DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  avatar TEXT NOT NULL DEFAULT 'https://res.cloudinary.com/dhemfvxnm/image/upload/v1757958403/memo_35_ixu6ha.png',
  favorite_color TEXT NULL,
  personal_details JSONB
);
COMMENT ON TABLE public.user_profiles IS 'Stores additional non-auth information for users.';

-- Stores user-generated memories linked to diary entries and images.
CREATE TABLE IF NOT EXISTS public.memories (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users NOT NULL,
  diary_entry_id uuid REFERENCES public.diary_entries(id) ON DELETE CASCADE,
  image_url text NOT NULL,
  context text,
  mood text,
  created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.memories IS 'Stores user-generated memories linked to diary entries and images.';

-- Stores the main posts or stories shared by users in the community.
CREATE TABLE IF NOT EXISTS public.posts (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NULL DEFAULT auth.uid(),
    author_name text NULL,
    content text NOT NULL,
    tags text[] NULL,
    comment_count integer NOT NULL DEFAULT 0,
    ai_analysis jsonb NULL,
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE SET NULL
);
COMMENT ON TABLE public.posts IS 'Stores the main posts or stories shared by users in the community.';

-- Stores responses or comments related to a specific post, including threaded replies.
CREATE TABLE IF NOT EXISTS public.comments (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL DEFAULT auth.uid(),
    author_name text NULL,
    content text NOT NULL,
    post_id uuid NOT NULL,
    parent_comment_id uuid NULL,
    ai_analysis jsonb NULL,
    CONSTRAINT comments_pkey PRIMARY KEY (id),
    CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts (id) ON DELETE CASCADE,
    CONSTRAINT comments_parent_comment_id_fkey FOREIGN KEY (parent_comment_id) REFERENCES public.comments (id) ON DELETE CASCADE
);
COMMENT ON TABLE public.comments IS 'Stores responses or comments related to a specific post, including threaded replies.';

-- Stores evolving AI-generated summaries of user activities for personalized recommendations.
CREATE TABLE IF NOT EXISTS public.user_ai_summaries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,
    diary_summary TEXT,
    aichat_summary TEXT,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    recommendations JSONB,
    last_prompts TEXT[] DEFAULT ARRAY[]::TEXT[],
    chat_counter INT DEFAULT 0
);
COMMENT ON TABLE public.user_ai_summaries IS 'Stores evolving AI-generated summaries of user activities for personalized recommendations.';

-- Stores pairs of user prompts and AI responses for the chat feature.
CREATE TABLE IF NOT EXISTS public.ai_chat_pairs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    user_prompt TEXT,
    ai_response TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.ai_chat_pairs IS 'Stores pairs of user prompts and AI responses for the chat feature.';

-- Stores the daily motivational quote, audio, and author.
CREATE TABLE IF NOT EXISTS public.daily_motivation (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  name text NOT NULL,
  quote text NOT NULL,
  audioLink text NOT NULL,
  imageLink text NOT NULL,
  CONSTRAINT daily_motivation_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.daily_motivation IS 'Stores the daily motivational quote, audio, and author.';

-- Stores a collection of motivational and mindful stories.
CREATE TABLE IF NOT EXISTS public.static_motivations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  title text NOT NULL,
  full_story text NOT NULL,
  imagelink text NOT NULL,
  audiolink text,
  category text NOT NULL,
  "readTime" text NOT NULL,
  CONSTRAINT static_motivations_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.static_motivations IS 'Stores a collection of motivational and mindful stories.';


-- ================================================================================================
-- Part 2: Storage Bucket and Policies
-- This section creates the storage bucket for images and sets its security rules.
-- ================================================================================================

-- Create a public bucket for diary images.
INSERT INTO storage.buckets (id, name, public)
VALUES ('diary_images', 'diary_images', true)
ON CONFLICT (id) DO NOTHING;

-- Policies for the 'diary_images' storage bucket
CREATE POLICY "Allow authenticated uploads" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'diary_images');
CREATE POLICY "Allow public read access" ON storage.objects FOR SELECT USING (bucket_id = 'diary_images');
CREATE POLICY "Allow individual user updates" ON storage.objects FOR UPDATE TO authenticated USING (auth.uid() = owner) WITH CHECK (bucket_id = 'diary_images');
CREATE POLICY "Allow individual user deletes" ON storage.objects FOR DELETE TO authenticated USING (auth.uid() = owner);


-- ================================================================================================
-- Part 3: Enable Row Level Security (RLS)
-- This section enables RLS for all data tables to ensure policies are enforced.
-- ================================================================================================

ALTER TABLE public.diary_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.memories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_ai_summaries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_chat_pairs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.daily_motivation ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.static_motivations ENABLE ROW LEVEL SECURITY;


-- ================================================================================================
-- Part 4: Row Level Security (RLS) Policies
-- This section creates policies to protect your data.
-- ================================================================================================

-- Policies for diary_entries
CREATE POLICY "Users can manage their own diary entries" ON public.diary_entries FOR ALL USING (auth.uid() = user_id);

-- Policies for user_profiles
CREATE POLICY "Users can view all profiles" ON public.user_profiles FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can manage their own profile" ON public.user_profiles FOR ALL USING (auth.uid() = id);

-- Policies for memories
CREATE POLICY "Users can manage their own memories" ON public.memories FOR ALL USING (auth.uid() = user_id);

-- Policies for posts
CREATE POLICY "Allow public read access" ON public.posts FOR SELECT USING (true);
CREATE POLICY "Allow insert for authenticated users" ON public.posts FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Allow users to update their own content" ON public.posts FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow users to delete their own content" ON public.posts FOR DELETE USING (auth.uid() = user_id);

-- Policies for comments
CREATE POLICY "Allow public read access" ON public.comments FOR SELECT USING (true);
CREATE POLICY "Allow insert for authenticated users" ON public.comments FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Allow users to update their own comments" ON public.comments FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow users to delete their own comments" ON public.comments FOR DELETE USING (auth.uid() = user_id);

-- Policies for user_ai_summaries
CREATE POLICY "Allow individual user read access" ON public.user_ai_summaries FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Allow individual user insert access" ON public.user_ai_summaries FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow individual user update access" ON public.user_ai_summaries FOR UPDATE USING (auth.uid() = user_id);

-- Policies for ai_chat_pairs
CREATE POLICY "Allow individual read access" ON public.ai_chat_pairs FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Allow individual insert access" ON public.ai_chat_pairs FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access" ON public.ai_chat_pairs FOR DELETE USING (auth.uid() = user_id);

-- Policies for daily_motivation (using latest provided wide-open policies)
CREATE POLICY "Allow all selects" ON public.daily_motivation FOR SELECT USING (true);
CREATE POLICY "Allow all inserts" ON public.daily_motivation FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow all updates" ON public.daily_motivation FOR UPDATE USING (true) WITH CHECK (true);
CREATE POLICY "Allow all deletes" ON public.daily_motivation FOR DELETE USING (true);

-- Policies for static_motivations
CREATE POLICY "Allow public read access for all users" ON public.static_motivations FOR SELECT USING (true);


-- ================================================================================================
-- Part 5: Database Functions
-- This section creates RPC functions for use in your application.
-- ================================================================================================

CREATE OR REPLACE FUNCTION handle_ai_chat_exchange(
    user_prompt_text TEXT,
    ai_response_text TEXT
)
RETURNS VOID AS $$
DECLARE
    current_user_id UUID := auth.uid();
    prompt_array TEXT[];
BEGIN
    -- Exit function if AI response is empty or null, indicating failure
    IF ai_response_text IS NULL OR ai_response_text = '' THEN
        RETURN;
    END IF;

    -- Insert the prompt and response pair
    INSERT INTO public.ai_chat_pairs (user_id, user_prompt, ai_response)
    VALUES (current_user_id, user_prompt_text, ai_response_text);

    -- Update user_ai_summaries
    SELECT last_prompts INTO prompt_array
    FROM public.user_ai_summaries
    WHERE user_id = current_user_id;

    -- Append the new prompt
    prompt_array := array_append(prompt_array, user_prompt_text);

    -- Trim the array to the last 5 prompts
    IF array_length(prompt_array, 1) > 5 THEN
        prompt_array := prompt_array[array_length(prompt_array, 1)-4:array_length(prompt_array, 1)];
    END IF;

    -- Upsert the updated summary information
    INSERT INTO public.user_ai_summaries (user_id, last_prompts, chat_counter)
    VALUES (current_user_id, prompt_array, 1)
    ON CONFLICT (user_id)
    DO UPDATE SET
        last_prompts = prompt_array,
        chat_counter = user_ai_summaries.chat_counter + 1;

    -- Delete oldest chat pair entries beyond 10 total for the user
    DELETE FROM public.ai_chat_pairs
    WHERE id IN (
        SELECT id
        FROM public.ai_chat_pairs
        WHERE user_id = current_user_id
        ORDER BY created_at ASC
        LIMIT (SELECT count(*) FROM public.ai_chat_pairs WHERE user_id = current_user_id) - 10
    );

END;
$$ LANGUAGE plpgsql;


-- ================================================================================================
-- Part 6: Sample Data Insertion
-- This section inserts the sample data you provided into the newly created tables.
-- ================================================================================================

-- Sample user profile
INSERT INTO public.user_profiles (id, display_name, age_range, preferred_activities, wellness_goals)
VALUES (
  '191c5cd1-4cc7-45ce-b67e-a07a040428ff',
  'Akshay',
  '19-24',
  ARRAY['running', 'meditation'],
  ARRAY['fitness', 'stress reduction']
) ON CONFLICT (id) DO NOTHING;

-- Sample daily motivations
INSERT INTO public.daily_motivation (name, quote, audioLink, imageLink)
VALUES
(
  'Winston Churchill',
  'Success is not final, failure is not fatal: it is the courage to continue that counts.',
  'https://youraudio.storage.com/path/to/churchill_motivation.mp3',
  'https://images.unsplash.com/photo-1552152370-fb05b252a1eb?q=80&w=2070&auto=format&fit=crop'
),
(
  'Akshay',
  'You have the right to perform your duty, but you are not entitled to the fruits of action. Never consider yourself the cause of the results of your activities, and never be attached to not doing your duty.',
  'https://ohmpvatucgddpujxhwav.supabase.co/storage/v1/object/public/diary_images/WhatsApp%20Audio%202025-09-18%20at%2000.29.52_d5254319.mp3',
  'https://t4.ftcdn.net/jpg/08/16/02/27/360_F_816022757_a8sLazVpFdQpJawXcZRC7RfYbV0X69BB.jpg'
) ON CONFLICT (id) DO NOTHING;

-- Sample static motivations
INSERT INTO public.static_motivations (title, full_story, imagelink, audiolink, category, "readTime")
VALUES
(
  'The Calm River',
  'The river doesn''t rush. It flows. It moves with a gentle, persistent strength, carving its path through the landscape without hurry. This is the first lesson of the calm river: true progress is not about speed, but about steady, mindful movement.\n\nFind a comfortable place to sit, close your eyes, and imagine this river. Picture the sunlight dancing on its surface, the smooth stones beneath the current, and the green banks that hold it. This river is within you. It is your breath.\n\nInhale slowly, deeply, and feel the current of your breath flow in. Exhale just as slowly, and feel it release. Like the river, your breath is a constant, life-giving force. It asks for nothing but your attention. By focusing on this simple, natural rhythm, you anchor yourself in the present moment, letting go of past regrets and future anxieties.\n\nThe river teaches us acceptance. It doesn''t fight the rocks in its path; it flows around them. It embraces the rain that swells its banks and the sun that warms its waters. In the same way, we can learn to accept our thoughts and feelings without judgment, allowing them to pass like leaves floating downstream.',
  'https://images.unsplash.com/photo-1502602898657-3e91760c0341?q=80&w=1000&auto=format&fit=crop',
  'https://youraudio.storage.com/path/to/the_calm_river.mp3',
  'Mindfulness',
  '3 min'
),
(
  'Mountain of Resilience',
  'Imagine a mountain. It stands tall through every season, unshakeable. Storms rage, winds howl, and snows fall, but the mountain remains. It is a symbol of profound resilience.\n\nYour inner strength is like this mountain. Challenges in life are like the weather—temporary and ever-changing. They may feel overwhelming in the moment, but they do not define your core. You have a foundation of resilience within you that can withstand any storm.\n\nBuilding this resilience is a practice. Each time you face a difficulty and choose to move forward, you are reinforcing your foundation. Each time you learn from a mistake, you add to your strength. You are not defined by the storms you face, but by the fact that you are still standing after they pass.',
  'https://images.unsplash.com/photo-1551632811-561732d1e306?q=80&w=1000&auto=format&fit=crop',
  'https://youraudio.storage.com/path/to/mountain_of_resilience.mp3',
  'Growth',
  '5 min'
),
(
  'Garden of Gratitude',
  'Your mind is a garden, and your thoughts are the seeds. You can choose to plant seeds of gratitude or seeds of complaint. What you nurture is what will grow.\n\nEach day, take a moment to tend to your garden. Acknowledge one small thing you are grateful for—the warmth of the sun, a kind word from a friend, the taste of your morning coffee. This simple act is like watering a seed of positivity.\n\nAt first, the changes may be small. But with consistent practice, your garden of gratitude will flourish. You will begin to notice more and more things to be thankful for. This shift in perspective doesn''t remove life''s difficulties, but it gives you a beautiful, resilient garden to find shelter in when challenges arise.',
  'https://images.unsplash.com/photo-1464226184884-fa280b87c399?q=80&w=1000&auto=format&fit=crop',
  null,
  'Wellness',
  '4 min'
) ON CONFLICT (id) DO NOTHING;